* Finding the code
On the [[https://academic.oup.com/bioinformatics/article/24/4/521/206987][landing page of the article]], there is a [[https://oup.silverchair-cdn.com/oup/backfile/Content_public/Journal/bioinformatics/24/4/10.1093_bioinformatics_btm625/2/btm625_Supplementary_Data.zip?Expires=1574686859&Signature=n4klbZdHWvJ1PDC6ROyvarnAeX8TziiG3rv26WGFP5nnwTPxb0OKOHFlRCol~gju3wbR-2QFMAM8mwCw69xtaNMGhkcMCGlI0BaeBmHWAMc12YPjpFzXBokBG4wunJErDMW6p6kb~EpJp9LPXV6m-50416-LihKEtGUtX8jJdq8LJMu~L~~anD4CPJd9Y~2fVfez4oFVU9EdCAuEBuEusqBJr1Ew1tkd-2NJ6OEqopQHQu8TCU3zxeiglNopKsGFkinhtG564T7m3Bh5mC4D-sgy9npJqzBCINFEVIJQhEpMJKc0ryE5FU9OFMUbQXxy5-aMNejxc6t90RmW7O9~og__&Key-Pair-Id=APKAIE5G5CRDK6RD3PGA][link]] for downloading a zip file with all the supplementary material. This zip file contains a file =bioinf-2007-1619-File004.tar=, whose contents are in file:scripts-from-suplementary-material-to-original-paper.

#+begin_src sh :results output :exports both
ls scripts-from-suplementary-material-to-original-paper
#+end_src

#+RESULTS:
: README
: analyze_crystal_fluctuations.py
: calculate_crystal_fluctuations.py

I remember that I had somewhat later published an update on my lab's Web site. That site, based on an increasingly hard to maintain Plone server, was later replaced by a simpler static HTML site, but much of the original content was not transferred. My updated scripts are therefore no longer available there, but fortunately there is a [[https://web.archive.org/web/20101114101014/http://dirac.cnrs-orleans.fr/plone/Members/hinsen/software-for-normal-mode-calculations-on-a-protein-crystal][copy in the Internet Archive]] which is in file:updated-scripts-from-obsolete-web-server.

#+begin_src sh :results output :exports both
ls updated-scripts-from-obsolete-web-server
#+end_src

#+RESULTS:
: README
: analyze_crystal_fluctuations.py
: calculate_crystal_fluctuations.py
: calculate_crystal_fluctuations_small_memory.py

A quick look at the changes shows 
 - an update in the version number of a dependency
 - the correction of a typo that had no influence on the results
 - a bug fix for handling PDB files with missing ADPs (anisotropic displacement parameters)
 - additional diagnostic output

#+begin_src sh :results output :exports both
diff -r scripts-from-suplementary-material-to-original-paper updated-scripts-from-obsolete-web-server
#+end_src

#+RESULTS:
#+begin_example
diff -r scripts-from-suplementary-material-to-original-paper/README updated-scripts-from-obsolete-web-server/README
21c21
< 4) Scientific Python, version 2.7.7 or later
---
> 4) Scientific Python, version 2.7.8 or later
diff -r scripts-from-suplementary-material-to-original-paper/analyze_crystal_fluctuations.py updated-scripts-from-obsolete-web-server/analyze_crystal_fluctuations.py
73,74c73,74
<     f_exp = N.array(adp_exp)
<     b_exp = f_exp[:,0,0]++f_exp[:,1,1]+f_exp[:,2,2]
---
>     f_exp = N.array([t.array for t in adp_exp])
>     b_exp = f_exp[:,0,0]+f_exp[:,1,1]+f_exp[:,2,2]
152,153c152,154
< writeArray(N.array([anisotropy(u.array) for u in adp_exp]),
<            'anisotropy_exp_%s_%d_%d_%d.plot' % (pdb_code, n1, n2 ,n3))
---
> if None not in adp_exp:
>     writeArray(N.array([anisotropy(u.array) for u in adp_exp]),
>                'anisotropy_exp_%s_%d_%d_%d.plot' % (pdb_code, n1, n2 ,n3))
diff -r scripts-from-suplementary-material-to-original-paper/calculate_crystal_fluctuations.py updated-scripts-from-obsolete-web-server/calculate_crystal_fluctuations.py
91a92,95
> print len(au_atoms), "C-alpha atoms in the asymmetric unit"
> print len(atoms), "C-alpha atoms in the unit cell"
> 
> 
Only in updated-scripts-from-obsolete-web-server: calculate_crystal_fluctuations_small_memory.py
#+end_example

None of these changes is important for reproducing the original results, so I will use the original code in the following.
* Dependencies
** Comments on the README from 2008
*** The Python interpreter, version 2.4 or 2.5.
Apparently I was careful back then, not envisaging later versions to be sufficiently compatible.

Python is still available from http://www.python.org/, although it is not clear if this will remain true after the end of support for Python in January 2020.
*** Numerical Python 23.8.2 or NumPy 1.x
There was a good reason to be specific about Numerical Python, since I knew my code did not work with versions 24.x, although I never found out why. It wasn't worth exploring since everybody was moving on to NumPy anyway. The download link for Numerical Python 23.8.2 no longer works.

"NumPy 1.x" was an overly optimistic statement. Contrary to Numerical Python, whose version number moved quickly without backwards compatibility issues, NumPy has introduced multiple breaking changes while remaining at major version 1 to this day. I know now that my code only works up to NumPy 1.8.
The site http://numpy.scipy.org/ no longer responds. The new home page is numpy.org, but I can't find a link to the source code there! I happen to know that NumPy is hosted on GitHub now (https://github.com/numpy/numpy). Old releases can be found there as well, though it requires some familiarity with GitHub habits.

Unfortunately I did not write down which version of NumPy I had actually used for my calculations. The paper was submitted in December 2007, so the most recent candidate is [[https://github.com/numpy/numpy/releases/tag/v1.0.4][1.0.4]], released in November 2007. 
*** netCDF 3.4 or later
All later versions should indeed work, including the current 4.x series. netCDF is still available from http://www.unidata.ucar.edu/software/netcdf/.
*** ScientificPython 2.7.7 or later, MMTK 2.5.21 or later
These are my own libraries, so I could be confident about compatibility. The download links are no longer valid (the forge at sourcesup.cru.fr no longer exists). The home pages are still alive (I maintain the server that hosts them myself) and point to the new download site at bitbucket.org. However, the code is managed by Mercurial, which Bitbucket won't support for much longer. I have to move somewhere else!
** Which versions to use for the reproduction attempt?
I feel confident to move on to:
 - Python 2.7 (https://www.python.org/downloads/release/python-2717/)
 - NumPy 1.8.2 (https://github.com/numpy/numpy/releases/tag/v1.8.2)
 - netCDF 4.7.2 (https://www.unidata.ucar.edu/software/netcdf/)
 - ScientificPython 2.9.4 (https://bitbucket.org/khinsen/scientificpython/downloads/ScientificPython-2.9.4.tar.gz)
 - MMTK 2.7.11 (https://bitbucket.org/khinsen/mmtk/downloads/MMTK-2.7.11.tar.gz)
These are the latest versions of everything except for NumPy.
* Input data
The only input data for each computation is a protein structure. The two protein structured used are still available from the Protein Data Bank: [[http://www.ebi.ac.uk/pdbe/entry-files/download/pdb1iee.ent][entry IEEE]] and [[http://www.ebi.ac.uk/pdbe/entry-files/download/pdb2lym.ent][entry 2LYM]].
The PDB does update its files from time to time, The file for a specifc entry is intended to represent the original data deposited by its authors at any time, but may be modified to conform to newer versions of the file format, or to fix mistakes. There is thus no guarantee that a file downloaded today is the same as in 2008, but the scientific information it contains is supposed to stay the same.
* Running the code using Guix
All the dependencies are already packaged for Guix. Creating an environment from
#+begin_src scheme
(specifications->manifest
 '("wget"
   "python2"
   "python2-mmtk"
   "gnuplot"))
#+end_src
should allow to download the PDB files, run the two scripts, and plot the results. Tested with guix version
#+begin_src sh :results output :exports both
guix describe
#+end_src

#+RESULTS:
: Generation 11	Nov 16 2019 10:44:27	(current)
:   guix 87e7faa
:     repository URL: https://git.savannah.gnu.org/git/guix.git
:     branch: master
:     commit: 87e7faa2ae641d8302efc8b90f1e45f43f67f6da

The steps are
#+begin_src sh :results output :exports both
wget -O 1IEE.pdb http://www.ebi.ac.uk/pdbe/entry-files/download/pdb1iee.ent
wget -O 2LYM.pdb http://www.ebi.ac.uk/pdbe/entry-files/download/pdb2lym.ent
python calculate_crystal_fluctuations.py
python analyze_crystal_fluctuations.py
#+end_src

The second script (=analyze_crystal_fluctuations.py=) crashes with the traceback:
#+begin_example
Traceback (most recent call last):
  File "analyze_crystal_fluctuations.py", line 74, in <module>
    b_exp = f_exp[:,0,0]++f_exp[:,1,1]+f_exp[:,2,2]
IndexError: too many indices
#+end_example
An analysis using =pdb= (the Python Debugger, not the Protein Data Bank!) shows that the conversion from a list of =Scientific.Geometry.Tensor= objects to a 3-dimensional NumPy array fails. This is probably due to a compatibility-breaking change in NumPy at some point (to be confirmed). The fix is to change line 73 from
#+begin_src python :results value
    f_exp = N.array(adp_exp)
#+end_src
to
#+begin_src python :results value
    f_exp = N.array([u.array for u in adp_exp])
#+end_src

With that fix, the script runs and produces several output files whose only documentation is the code.
** Older NumPy versions in Guix
The oldest NumPy version in Guix is 1.9.1, added with commit ee8869a694803e582e203208d04a0725bfc8241 in December 2014.
* Trying to use NumPy 1.0.4
To explore the cause of the crash in =analyze_crystal_fluctuations.py=, it would be nice to run with a NumPy version close to the original. Unfortunately, NumPy 1.0.4 cannot be installed with Python 2.7.16. NumPy 1.0.4 uses a modified version of the then-current =distutils=, whose code to read the Python installation configuration cannot deal with the configuration files of Python 2.7.
** Python 2.5
Installation under Guix
#+begin_src sh :results output :exports both
guix environment --ad-hoc wget -- wget https://www.python.org/ftp/python/2.5.2/Python-2.5.2.tgz

guix environment --container --ad-hoc wget gzip tar binutils autoconf coreutils sed grep make gcc-toolchain
wget https://www.python.org/ftp/python/2.5.2/Python-2.5.2.tgz
tar xzf Python-2.5.2.tgz
cd Python-2.5.2
./configure --prefix=$HOME/python2.5
make install
#+end_src
Fails:
#+begin_example
IOError: [Errno 2] No such file or directory: '/usr/include/netinet/in.h'
#+end_example
Conclusion: Python 2.5 must first be packaged for Guix.
* Reproduction using the patched original scripts
The scripts perform the core of the computations, but their output is not sufficient to reproduce the figures shown in the paper. The transformation from the output of the scripts to the figures has been done using additional scripts (not published and lost in the meantime) and by manual intervention. It would not be difficult to reconstruct this work, but that would be replication rather then reproduction, and thus not the subject of the current exercise. In the following, I will limite myself to producing figures that should convince the reader that the numbers I obtain today are sufficiently close to the numbers I obtained in 2007.
** Record Guix version
#+begin_src sh :results output :exports both
guix describe
#+end_src

#+RESULTS:
: Generation 16	Jan 14 2020 10:00:52	(current)
:   guix 5c3d77c
:     repository URL: https://git.savannah.gnu.org/git/guix.git
:     branch: master
:     commit: 5c3d77c3b14a9e87b4075efa4d7a877181e25665

** Download PDB files
#+begin_src sh :results output :exports both
cd reproduction
guix environment --pure --ad-hoc wget -- wget -O 1IEE.pdb http://www.ebi.ac.uk/pdbe/entry-files/download/pdb1iee.ent
guix environment --pure --ad-hoc wget -- wget -O 2LYM.pdb http://www.ebi.ac.uk/pdbe/entry-files/download/pdb2lym.ent
guix environment --pure --ad-hoc wget -- wget -O 3LZT.pdb http://www.ebi.ac.uk/pdbe/entry-files/download/pdb3lzt.ent
#+end_src

** Run the analysis on 3LZT (for Figure 2)
#+begin_src sh :results output :exports both
cd reproduction

guix environment --container --ad-hoc python2 python2-mmtk -- python calculate_crystal_fluctuations.py 3LZT 1 1 1 1.0
guix environment --container --ad-hoc python2 python2-mmtk -- python analyze_crystal_fluctuations.py  3LZT 1 1 1
#+end_src

** Run the analysis on 1IEE (for Figures 3 to 5)
#+begin_src sh :results output :exports both
cd reproduction

guix environment --container --ad-hoc python2 python2-mmtk -- python calculate_crystal_fluctuations.py 1IEE 1 1 1 2.99
guix environment --container --ad-hoc python2 python2-mmtk -- python analyze_crystal_fluctuations.py  1IEE 1 1 1

guix environment --container --ad-hoc python2 python2-mmtk -- python calculate_crystal_fluctuations.py 1IEE 2 2 2 2.99
guix environment --container --ad-hoc python2 python2-mmtk -- python analyze_crystal_fluctuations.py  1IEE 2 2 2

guix environment --container --ad-hoc python2 python2-mmtk -- python calculate_crystal_fluctuations.py 1IEE 3 3 3 2.99
guix environment --container --ad-hoc python2 python2-mmtk -- python analyze_crystal_fluctuations.py  1IEE 3 3 3

guix environment --container --ad-hoc python2 python2-mmtk -- python calculate_crystal_fluctuations.py 1IEE 4 4 4 2.99
guix environment --container --ad-hoc python2 python2-mmtk -- python analyze_crystal_fluctuations.py  1IEE 4 4 4

guix environment --container --ad-hoc python2 python2-mmtk -- python calculate_crystal_fluctuations.py 1IEE 5 5 5 2.99
guix environment --container --ad-hoc python2 python2-mmtk -- python analyze_crystal_fluctuations.py  1IEE 5 5 5

guix environment --container --ad-hoc python2 python2-mmtk -- python calculate_crystal_fluctuations.py 1IEE 10 10 10 2.99
guix environment --container --ad-hoc python2 python2-mmtk -- python analyze_crystal_fluctuations.py  1IEE 10 10 10

#+end_src

#+RESULTS:
: 129 out of 129 atoms have ADPs
: 129 out of 129 atoms have ADPs
: 129 out of 129 atoms have ADPs
: 129 out of 129 atoms have ADPs
: 129 out of 129 atoms have ADPs
: 129 out of 129 atoms have ADPs

** Reconstruct the plots (partially)

*** Figures 2 and 3
Both figures contain single-molecule data that are not computed by the scripts and thus not shown here. The crystal data should however convince the reader that the reproduced values are the same as the original ones.

In Fig. 2, the B factor scale is in "arbitray units" and it isn't quite clear what factor was used in the original plot.
#+begin_src gnuplot :tangle reproduction/fig2.gnuplot
set terminal png
set output "fig2.png"
set multiplot
set size 1.,0.5
set origin 0.,0.5
set yrange [0.:0.001]
plot "btotal_3LZT_1_1_1.plot" w l
set size 1.,0.5
set origin 0.,0.
set yrange [0.:1.]
plot "anisotropy_total_3LZT_1_1_1.plot" w l
unset multiplot
#+end_src
#+begin_src sh :results output :exports both
cd reproduction
gnuplot < fig2.gnuplot
#+end_src

#+RESULTS:

[[file:reproduction/fig2.png]]

In Fig. 3, the B factors are scaled by a factor 100 to convert the nm^2 values in the files to Ang^2 as used in the original plots.

#+begin_src gnuplot :tangle reproduction/fig3.gnuplot
set terminal png
set output "fig3.png"
set multiplot
set size 1.,0.5
set origin 0.,0.5
set yrange [0.:0.1]
plot "btotal_1IEE_1_1_1.plot" using (100*$1) w l
set size 1.,0.5
set origin 0.,0.
set yrange [0.:1.]
plot "anisotropy_total_1IEE_1_1_1.plot" w l
unset multiplot
#+end_src
#+begin_src sh :results output :exports both
cd reproduction
gnuplot < fig3.gnuplot
#+end_src

#+RESULTS:

[[file:reproduction/fig3.png]]

*** Figure 4
The elastic medium approximation is not computed by the scripts, so only the crystal modes will be plotted here. Moreover, the following plot mixes the four panes (and more) of the original figure, because the scripts do not sort the q vectors by direction, as would be required to reproduce Figure 4 correctly. The link between the figure below and the original Figure 4 is that all the drawn-out lines in the latter should pass through the points in the former.

#+begin_src gnuplot :tangle reproduction/fig4.gnuplot
set terminal png
set output "fig4.png"
plot "dispersion_1IEE_5_5_5.plot" w p
#+end_src
#+begin_src sh :results output :exports both
cd reproduction
gnuplot < fig4.gnuplot
#+end_src

#+RESULTS:

[[file:reproduction/fig4.png]]
